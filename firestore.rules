rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is the owner of a document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to check if user is a participant in a chat
    function isChatParticipant(chatId) {
      return isAuthenticated() && 
        (request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants);
    }

    // PUBLIC USER PROFILES
    match /users_public/{userId} {
      allow read: if true; // anyone can read public profiles
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // PRIVATE USER PROFILES
    match /users_private/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // LISTINGS COLLECTION RULES
    match /listings/{listingId} {
      // Anyone can read listings
      allow get, list: if true;
      // Only authenticated users can create listings
      allow create: if request.auth != null;
      // Only the owner can update or delete their listing
      allow update, delete: if request.auth != null &&
        (
          // Support for different field names across your codebase
          (resource.data.sellerId == request.auth.uid) ||
          (resource.data.userId == request.auth.uid) ||
          (resource.data.uid == request.auth.uid)
        );
    }

    // CHATS COLLECTION RULES
    match /chats/{chatId} {
      // Allow read if user is a participant in the chat
      allow read: if isAuthenticated() && 
        (request.auth.uid in resource.data.participants);
      
      // Allow creation of new chats
      allow create: if isAuthenticated() && 
        request.auth.uid in request.resource.data.participants;
      
      // Allow updates if user is a participant
      allow update: if isAuthenticated() && 
        (request.auth.uid in resource.data.participants);

      // CHAT MESSAGES SUBCOLLECTION RULES
      match /messages/{messageId} {
        // Allow read if user is a participant in the parent chat
        allow read: if isAuthenticated() && 
          (request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants);
        
        // Allow creation of messages if user is a participant
        allow create: if isAuthenticated() && 
          (request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants);
        
        // Allow updates if user is the sender
        allow update: if isAuthenticated() && 
          (request.auth.uid == resource.data.senderId);
        
        // Allow deletion if user is the sender
        allow delete: if isAuthenticated() && 
          (request.auth.uid == resource.data.senderId);
      }
    }

    // Users collection rules
    match /users/{userId} {
      // Allow read access to all authenticated users
      allow read: if isAuthenticated();
      
      // Allow users to update only their own profile
      allow update: if isOwner(userId);
    }

    // Messages collection rules
    match /messages/{messageId} {
      // Allow read/write only to participants in the conversation
      allow read, write: if isAuthenticated() && 
        (request.auth.uid == resource.data.senderId || 
         request.auth.uid == resource.data.receiverId);
    }

    // Add similar rules for other collections as needed (e.g., messages, reviews, etc.)
  }
}